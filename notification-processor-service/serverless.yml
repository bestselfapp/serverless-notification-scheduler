service: bsa-notification-processor-service

# pin to a specific Serverless version
# frameworkVersion: ">=2.0.0 <3.0.0"

provider:
  name: aws
  region: us-east-1
  runtime: nodejs18.x
  deploymentBucket: bsa-deploy-${env:AWS_ENV, 'dev'}-${self:provider.region}
  stage: live
  stackName: bsa-${self:service}-live
  memorySize: 1024
  logRetentionInDays: 14 # cloudwatch logs
  timeout: 15 # seconds
  versionFunctions: true
  iamRoleStatements:
  -
    Effect: Allow
    Action:
      - s3:GetObject
      - s3:PutObject
      - s3:DeleteObject
      - s3:ListBucket
    Resource:
      - arn:aws:s3:::bsa-notifications-${env:AWS_ENV, 'dev'}-${self:provider.region}/*
      - arn:aws:s3:::bsa-notifications-${env:AWS_ENV, 'dev'}-${self:provider.region}
      - arn:aws:s3:::bsa-email-contents-${env:AWS_ENV, 'dev'}-${self:provider.region}/*
      - arn:aws:s3:::bsa-email-contents-${env:AWS_ENV, 'dev'}-${self:provider.region}
  -
    Effect: Allow
    Action:
      - sns:Publish
    Resource:
      - arn:aws:sns:${self:provider.region}:${aws:accountId}:bsa-notification-scheduler
  -
    Effect: Allow
    Action:
      - ses:SendEmail
      - ses:SendRawEmail
      - ses:VerifyEmailIdentity
      - ses:VerifyDomainIdentity
      - ses:GetSendStatistics
      - ses:GetSendQuota
    Resource: "*"


plugins:
  - serverless-mocha-plugin
  - serverless-prune-plugin
  - serverless-plugin-diff

custom:
  # serverless-prune-plugin
  prune:
    automatic: true
    number: 5

package:
  exclude:
    - .git/**
    - terraform/**
    - scripts/**

resources:
  Resources:
    LambdaErrorTopic:
      Type: 'AWS::SNS::Topic'
      Properties:
        TopicName: bsa-notification-processor-lambda-error
        Subscription:
          - Protocol: email
            Endpoint: ops+${env:AWS_ENV, 'dev'}@bestselfapp.xyz

    EmailContentsBucket:
      Type: 'AWS::S3::Bucket'
      Properties:
        BucketName: bsa-email-contents-${env:AWS_ENV, 'dev'}-${self:provider.region}
        AccessControl: Private
        LifecycleConfiguration:
          Rules:
            - Id: ExpireContentsAfterNinetyDays
              Status: Enabled
              ExpirationInDays: 90

    EmailContentsBucketParameter:
      Type: 'AWS::SSM::Parameter'
      Properties:
        Name: '/bsa/exports/notificaitons/email-contents-bucket'
        Type: 'String'
        Value: 'bsa-email-contents-${self:provider.region}'
        Description: 'S3 bucket for email contents, other services can write to this, Notification Scheduler Service will read'
        Tier: 'Standard'

    LambdaNoInvocationTopic:
      Type: 'AWS::SNS::Topic'
      Properties:
        TopicName: bsa-notification-processor-no-invocation
        Subscription:
          - Protocol: email
            Endpoint: ops+${env:AWS_ENV, 'dev'}@bestselfapp.xyz

    LambdaErrorAlarm:
      Type: 'AWS::CloudWatch::Alarm'
      Properties:
        AlarmName: bsa-notification-processor-lambda-error
        AlarmDescription: 'Notification processor lambda had an error today'
        Namespace: 'AWS/Lambda'
        MetricName: 'Errors'
        Statistic: 'Sum'
        Period: '86400' # 24 hours in seconds, so we get one alarm per day
        EvaluationPeriods: '1'
        Threshold: '1'
        ComparisonOperator: 'GreaterThanOrEqualToThreshold'
        AlarmActions:
          - arn:aws:sns:${self:provider.region}:${aws:accountId}:bsa-notification-processor-lambda-error
        Dimensions:
          - Name: FunctionName
            Value: bsa-notification-processor

    LambdaNoInvocationAlarm:
      Type: 'AWS::CloudWatch::Alarm'
      Properties:
        AlarmName: bsa-notification-processor-lambda-no-invocation
        AlarmDescription: 'Notification processor lambda was not invoked in the last 3 days'
        Namespace: 'AWS/Lambda'
        MetricName: 'Invocations'
        Statistic: 'Sum'
        Period: '86400' # 24 hours in seconds, so we get one alarm per day
        EvaluationPeriods: '1'
        Threshold: '1'
        ComparisonOperator: 'LessThanOrEqualToThreshold'
        # No invocations results in 'Insufficient data' rather than 0 invocations
        # so we need to treat missing data as breaching to achieve the desired effect
        TreatMissingData: 'breaching'
        AlarmActions:
          - arn:aws:sns:${self:provider.region}:${aws:accountId}:bsa-notification-processor-lambda-no-invocation
        Dimensions:
          - Name: FunctionName
            Value: bsa-notification-processor

functions:
  bsa-notification-processor:
    name: 'bsa-notification-processor'
    handler: index.handler
    timeout: 60 # seconds
    environment:
      LOG_LEVEL: 'trace'
      NOTIFICATION_BUCKET: ${ssm:/bsa/exports/notifications/notifications_bucket}
      EMAIL_CONTENTS_BUCKET: bsa-email-contents-${self:provider.region}
      TWILIO_ACCOUNT_SID: ${ssm:/bsa/TWILIO_ACCOUNT_SID}
      TWILIO_AUTH_TOKEN: ${ssm:/bsa/TWILIO_AUTH_TOKEN}
      TWILIO_FROM_NUMBER: ${ssm:/bsa/TWILIO_FROM_NUMBER}
      BSA_CALLBACKS_APIKEY: ${ssm:/bsa/secrets/callbacks_apikey}
      MAX_NOTIFICATIONS_PER_USER_PER_HOUR: 2
      MAX_NOTIFICATIONS_PER_USER_PER_DAY: 3
    events:
      - sns:
          arn: ${ssm:/bsa/exports/notifications/notifications_processor_topic_arn}
